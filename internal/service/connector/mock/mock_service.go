// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Jira-Analyzer/backend-services/internal/service/connector (interfaces: IIssueService,IProjectService)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination mock/mock_service.go . IIssueService,IProjectService
//

// Package mock_connector is a generated GoMock package.
package mock_connector

import (
	context "context"
	reflect "reflect"

	domain "github.com/Jira-Analyzer/backend-services/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockIIssueService is a mock of IIssueService interface.
type MockIIssueService struct {
	ctrl     *gomock.Controller
	recorder *MockIIssueServiceMockRecorder
}

// MockIIssueServiceMockRecorder is the mock recorder for MockIIssueService.
type MockIIssueServiceMockRecorder struct {
	mock *MockIIssueService
}

// NewMockIIssueService creates a new mock instance.
func NewMockIIssueService(ctrl *gomock.Controller) *MockIIssueService {
	mock := &MockIIssueService{ctrl: ctrl}
	mock.recorder = &MockIIssueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIssueService) EXPECT() *MockIIssueServiceMockRecorder {
	return m.recorder
}

// InsertIssue mocks base method.
func (m *MockIIssueService) InsertIssue(arg0 context.Context, arg1 domain.Issue) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIssue", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIssue indicates an expected call of InsertIssue.
func (mr *MockIIssueServiceMockRecorder) InsertIssue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIssue", reflect.TypeOf((*MockIIssueService)(nil).InsertIssue), arg0, arg1)
}

// UpdateIssue mocks base method.
func (m *MockIIssueService) UpdateIssue(arg0 context.Context, arg1 domain.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssue indicates an expected call of UpdateIssue.
func (mr *MockIIssueServiceMockRecorder) UpdateIssue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssue", reflect.TypeOf((*MockIIssueService)(nil).UpdateIssue), arg0, arg1)
}

// MockIProjectService is a mock of IProjectService interface.
type MockIProjectService struct {
	ctrl     *gomock.Controller
	recorder *MockIProjectServiceMockRecorder
}

// MockIProjectServiceMockRecorder is the mock recorder for MockIProjectService.
type MockIProjectServiceMockRecorder struct {
	mock *MockIProjectService
}

// NewMockIProjectService creates a new mock instance.
func NewMockIProjectService(ctrl *gomock.Controller) *MockIProjectService {
	mock := &MockIProjectService{ctrl: ctrl}
	mock.recorder = &MockIProjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProjectService) EXPECT() *MockIProjectServiceMockRecorder {
	return m.recorder
}

// InsertProject mocks base method.
func (m *MockIProjectService) InsertProject(arg0 context.Context, arg1 domain.Project) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProject", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProject indicates an expected call of InsertProject.
func (mr *MockIProjectServiceMockRecorder) InsertProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProject", reflect.TypeOf((*MockIProjectService)(nil).InsertProject), arg0, arg1)
}

// UpdateProject mocks base method.
func (m *MockIProjectService) UpdateProject(arg0 context.Context, arg1 domain.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockIProjectServiceMockRecorder) UpdateProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockIProjectService)(nil).UpdateProject), arg0, arg1)
}
