// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Jira-Analyzer/backend-services/internal/service/connector (interfaces: IService)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination mock/mock_service.go . IService
//

// Package mock_connector is a generated GoMock package.
package mock_connector

import (
	reflect "reflect"

	dto "github.com/Jira-Analyzer/backend-services/internal/client/jira/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// FetchIssue mocks base method.
func (m *MockIService) FetchIssue(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchIssue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchIssue indicates an expected call of FetchIssue.
func (mr *MockIServiceMockRecorder) FetchIssue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchIssue", reflect.TypeOf((*MockIService)(nil).FetchIssue), arg0)
}

// FetchProject mocks base method.
func (m *MockIService) FetchProject(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchProject indicates an expected call of FetchProject.
func (mr *MockIServiceMockRecorder) FetchProject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProject", reflect.TypeOf((*MockIService)(nil).FetchProject), arg0)
}

// FetchProjects mocks base method.
func (m *MockIService) FetchProjects(arg0, arg1 int) (*dto.ProjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProjects", arg0, arg1)
	ret0, _ := ret[0].(*dto.ProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProjects indicates an expected call of FetchProjects.
func (mr *MockIServiceMockRecorder) FetchProjects(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProjects", reflect.TypeOf((*MockIService)(nil).FetchProjects), arg0, arg1)
}
